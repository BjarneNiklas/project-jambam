import 'package:project_jambam/src/features/a_ideation/application/concept_agent.dart';
import 'package:project_jambam/src/features/a_ideation/application/concept_generation_service.dart';
import 'package:project_jambam/src/features/a_ideation/data/llm_concept_generation_service.dart';
import 'package:project_jambam/src/features/a_ideation/domain/jam_kit.dart';

/// Orchestrates multiple agents to generate a richer, multi-perspective JamKit.
class AgenticConceptGenerationService implements ConceptGenerationService {
  AgenticConceptGenerationService({
    required this.llmService,
    ConceptAgent? worldBuilder,
    ConceptAgent? mechanicsAgent,
    ConceptAgent? artDirectionAgent,
    ConceptAgent? monetizationAgent,
    ConceptAgent? criticAgent,
  })  : worldBuilder = worldBuilder ?? WorldBuilderAgent(),
        mechanicsAgent = mechanicsAgent ?? MechanicsAgent(),
        artDirectionAgent = artDirectionAgent ?? ArtDirectionAgent(),
        monetizationAgent = monetizationAgent ?? MonetizationAgent(),
        criticAgent = criticAgent ?? CriticAgent();

  final LlmConceptGenerationService llmService;
  final ConceptAgent worldBuilder;
  final ConceptAgent mechanicsAgent;
  final ConceptAgent artDirectionAgent;
  final ConceptAgent monetizationAgent;
  final ConceptAgent criticAgent;

  @override
  Future<JamKit> generateConcept(ConceptGenerationInput input) async {
    // Round 1: Specialized agents generate their respective parts
    final world = await worldBuilder.generatePart(input);
    final art = await artDirectionAgent.generatePart(input);

    // Conditionally run mechanics and monetization agents
    final mechanic = input.useMechanics
        ? await mechanicsAgent.generatePart(input)
        : 'Mechanics agent disabled.';
    final monetization = input.useMonetization
        ? await monetizationAgent.generatePart(input)
        : 'Monetization agent disabled.';

    final specialistInsights = [
      world,
      if (input.useMechanics) mechanic,
      art,
      if (input.useMonetization) monetization,
    ];

    // Round 2: Critic agent provides feedback
    final criticInput = ConceptGenerationInput(
      keywords: specialistInsights,
      inspirationMode: input.inspirationMode,
      useMechanics: input.useMechanics,
      useMonetization: input.useMonetization,
    );
    final feedback = await criticAgent.generatePart(criticInput);

    // Round 3: Combine initial ideas and feedback for the final prompt
    final finalAugmentedInput = ConceptGenerationInput(
      keywords: [
        ...input.keywords,
        '--- AGENT PERSPECTIVES ---',
        ...specialistInsights,
        '--- CRITICAL FEEDBACK & REFINEMENT SUGGESTIONS ---',
        feedback,
        '--- FINAL TASK ---',
        'Based on the perspectives and the critical feedback, generate a cohesive and improved final Jam Kit.',
      ],
      inspirationMode: input.inspirationMode,
      useMechanics: input.useMechanics,
      useMonetization: input.useMonetization,
    );

    // Final Generation: LLM generates the final, refined JamKit
    final jamKit = await llmService.generateConcept(
      prompt: finalAugmentedInput.keywords.join(', '),
      category: 'agentic-game-design',
      style: 'multi-agent-collaboration',
    );

    // Attach all insights (specialist + critic) as inspiration sources
    return JamKit(
      id: jamKit['id'] ?? 'agentic-kit-${DateTime.now().millisecondsSinceEpoch}',
      title: jamKit['title'] ?? 'Agentic Game Concept',
      theme: jamKit['content'] ?? 'A collaborative game concept generated by AI agents',
      quests: [
        Quest(title: 'Main Quest', description: 'Complete the core game loop'),
        Quest(title: 'Agent Quest', description: 'Explore the multi-agent features'),
      ],
      assetSuggestions: [
        AssetSuggestion(
          type: 'character',
          description: 'Main character design',
          stylePrompt: 'Modern, appealing character design',
        ),
        AssetSuggestion(
          type: 'environment',
          description: 'Game world environment',
          stylePrompt: 'Immersive, detailed environment',
        ),
      ],
      inspirationSources: [...specialistInsights, '--- CRITIC ---', feedback],
    );
  }

  @override
  Future<JamSeed> generateJamSeed(ConceptGenerationInput input) async {
    // Agentic jam seed generation using multiple specialized agents
    final agents = <_BaseAgent>[
      _InspirationAgent(),
      _MechanicsAgent(),
      _NarrativeAgent(),
      _VisualAgent(),
    ];
    
    final results = await Future.wait(
      agents.map((agent) => agent.process(input)),
    );
    
    return _combineAgentResults(results, input);
  }
  
  JamSeed _combineAgentResults(List<Map<String, dynamic>> results, ConceptGenerationInput input) {
    final combined = <String, dynamic>{};
    
    for (final result in results) {
      combined.addAll(result);
    }
    
    return JamSeed(
      id: 'agentic-seed-${DateTime.now().millisecondsSinceEpoch}',
      title: combined['title'] ?? 'Agentic Game Concept',
      coreConcept: combined['coreConcept'] ?? 'A collaborative game concept generated by AI agents.',
      inspirationElements: input.keywords,
      creativeConstraints: combined['constraints'] ?? ['Agentic generation'],
    );
  }
}

abstract class _BaseAgent {
  Future<Map<String, dynamic>> process(ConceptGenerationInput input);
}

class _InspirationAgent extends _BaseAgent {
  @override
  Future<Map<String, dynamic>> process(ConceptGenerationInput input) async {
    return {
      'title': 'Inspired by ${input.keywords.join(', ')}',
      'coreConcept': 'A game that draws inspiration from ${input.keywords.take(3).join(', ')}',
    };
  }
}

class _MechanicsAgent extends _BaseAgent {
  @override
  Future<Map<String, dynamic>> process(ConceptGenerationInput input) async {
    return {
      'constraints': ['Mechanics-driven design'],
    };
  }
}

class _NarrativeAgent extends _BaseAgent {
  @override
  Future<Map<String, dynamic>> process(ConceptGenerationInput input) async {
    return {
      'constraints': ['Story-focused experience'],
    };
  }
}

class _VisualAgent extends _BaseAgent {
  @override
  Future<Map<String, dynamic>> process(ConceptGenerationInput input) async {
    return {
      'constraints': ['Visual style emphasis'],
    };
  }
} 